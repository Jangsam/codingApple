this keyword(1)
this 뜻

1. console.log(this)

   function func(){
    console.log(this)
   }
- window

2. strict mode
    console.log(this)
- undefined

3. 오브젝트 내 함수안
    var obj = {
        함수 : function(){
            console.log(this)
        }
    }
- 그 함수를 가지고 있는 오브젝트
obj.함수();
-> obj
ex) var obj = {
        data : {
            func : function(){
                console.log(this)
            }
        }
    }
obj.data.func();
-> obj.data

4. arrow func
    var obj = {
            함수 : function(){
                console.log(this)
            }
        }
- this 값을 함수 밖에 있던거 그대로 사용 ( 상위요소(부모)의 값을 상속받음 )


this keyword(2)


5. 오브젝트 생성기계 (constructor)
    function 기계(){
        this.이름 = 'kim'
    }
    함수를 만들때 this 를 사용하면 constructor
    this = 새로 생성되는 오브젝트(instance)

- 새로 생성되는 오브젝트(instance)를 뜻함

6. Event Listener
    document.querySelector('.???').addEventListener('click', function(){
        function(){
            this;
        }
        function(e){
            e.currentTarget;
        }
    });

- e.currentTarget; ( 지금 이벤트가 동작하는 곳 )



this 값 구별법
this 를 갖고 있는 주체를 확인하자

4번) arrow function 특징 : 내부의 this 값을 변화 시키지 않음. ( 외부의 this 값 그대로 재사용 가능 )


Object 안에 함수 넣을때 신문법 :

var obj = {
    func(){

    }
}

기본
var obj = {
    func : function(){

    }
}

{ window } : global obj
함수나 변수를 전역공간에 만들면 { window }에 보관합니다.

1번이 결과값이 window 이유

func(); = window.func();

window : {
    func(){
        console.log(this)
    }
}
-> 3번 obj 안 함수에서 this 를 사용하면 그 함수를 가지고 있는 오브젝트를 뜻함
window


5번 Constructor 에서 오브젝트 생산하는 법

var obj = new 기계();